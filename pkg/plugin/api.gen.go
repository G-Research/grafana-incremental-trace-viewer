//go:build go1.22

// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package plugin

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
)

// AnyValue AnyValue is used to represent any type of attribute value.
type AnyValue struct {
	union json.RawMessage
}

// AnyValue0 A string value.
type AnyValue0 struct {
	StringValue *string `json:"stringValue,omitempty"`
}

// AnyValue1 A boolean value.
type AnyValue1 struct {
	BoolValue *bool `json:"boolValue,omitempty"`
}

// AnyValue2 An integer value.
type AnyValue2 struct {
	IntValue *string `json:"intValue,omitempty"`
}

// AnyValue3 A double value.
type AnyValue3 struct {
	DoubleValue *float64 `json:"doubleValue,omitempty"`
}

// AnyValue4 An array of AnyValue.
type AnyValue4 struct {
	// ArrayValue ArrayValue is a list of AnyValue messages.
	ArrayValue *ArrayValue `json:"arrayValue,omitempty"`
}

// AnyValue5 A list of KeyValue pairs.
type AnyValue5 struct {
	// KvlistValue KeyValueList is a list of KeyValue messages.
	KvlistValue *KeyValueList `json:"kvlistValue,omitempty"`
}

// AnyValue6 A bytes value.
type AnyValue6 struct {
	BytesValue *[]byte `json:"bytesValue,omitempty"`
}

// ArrayValue ArrayValue is a list of AnyValue messages.
type ArrayValue struct {
	Values *[]AnyValue `json:"values,omitempty"`
}

// DataSourceInfo defines model for DataSourceInfo.
type DataSourceInfo struct {
	Database  string `json:"database"`
	TimeField string `json:"timeField"`
	URL       string `json:"url"`
}

// GetAdditionalSpansRequest defines model for GetAdditionalSpansRequest.
type GetAdditionalSpansRequest struct {
	ChildrenLimit int    `json:"childrenLimit"`
	Database      string `json:"database"`
	Depth         int    `json:"depth"`
	Level         int    `json:"level"`
	Skip          int    `json:"skip"`
	Take          int    `json:"take"`
	TimeField     string `json:"timeField"`
	URL           string `json:"url"`
}

// GetInitialTraceDetailRequest defines model for GetInitialTraceDetailRequest.
type GetInitialTraceDetailRequest struct {
	ChildrenLimit *int   `json:"childrenLimit,omitempty"`
	Database      string `json:"database"`
	Depth         *int   `json:"depth,omitempty"`
	TimeField     string `json:"timeField"`
	URL           string `json:"url"`
}

// KeyValue KeyValue is a key-value pair for attributes.
type KeyValue struct {
	// Key The attribute key.
	Key *string `json:"key,omitempty"`

	// Value AnyValue is used to represent any type of attribute value.
	Value *AnyValue `json:"value,omitempty"`
}

// KeyValueList KeyValueList is a list of KeyValue messages.
type KeyValueList struct {
	Values *[]KeyValue `json:"values,omitempty"`
}

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	Traces []Trace `json:"traces"`
}

// SpanNode defines model for SpanNode.
type SpanNode struct {
	CurrentChildrenCount int       `json:"currentChildrenCount"`
	EndTime              time.Time `json:"endTime"`
	Level                int       `json:"level"`
	Name                 string    `json:"name"`
	ParentSpanID         string    `json:"parentSpanId"`
	SpanID               string    `json:"spanId"`
	StartTime            time.Time `json:"startTime"`
	TotalChildrenCount   int       `json:"totalChildrenCount"`
	TraceID              string    `json:"traceId"`
}

// Trace defines model for Trace.
type Trace struct {
	Name      string    `json:"name"`
	SpanID    string    `json:"spanId"`
	Timestamp time.Time `json:"timestamp"`
	TraceID   string    `json:"traceId"`
}

// Traces defines model for Traces.
type Traces struct {
	Traces []Trace `json:"traces"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {
	Q     *string `form:"q,omitempty" json:"q,omitempty"`
	Start *int    `form:"start,omitempty" json:"start,omitempty"`
}

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = DataSourceInfo

// GetInitialTraceDetailJSONRequestBody defines body for GetInitialTraceDetail for application/json ContentType.
type GetInitialTraceDetailJSONRequestBody = GetInitialTraceDetailRequest

// GetAdditionalSpansJSONRequestBody defines body for GetAdditionalSpans for application/json ContentType.
type GetAdditionalSpansJSONRequestBody = GetAdditionalSpansRequest

// GetTracesJSONRequestBody defines body for GetTraces for application/json ContentType.
type GetTracesJSONRequestBody = DataSourceInfo

// AsAnyValue0 returns the union data inside the AnyValue as a AnyValue0
func (t AnyValue) AsAnyValue0() (AnyValue0, error) {
	var body AnyValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnyValue0 overwrites any union data inside the AnyValue as the provided AnyValue0
func (t *AnyValue) FromAnyValue0(v AnyValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnyValue0 performs a merge with any union data inside the AnyValue, using the provided AnyValue0
func (t *AnyValue) MergeAnyValue0(v AnyValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnyValue1 returns the union data inside the AnyValue as a AnyValue1
func (t AnyValue) AsAnyValue1() (AnyValue1, error) {
	var body AnyValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnyValue1 overwrites any union data inside the AnyValue as the provided AnyValue1
func (t *AnyValue) FromAnyValue1(v AnyValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnyValue1 performs a merge with any union data inside the AnyValue, using the provided AnyValue1
func (t *AnyValue) MergeAnyValue1(v AnyValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnyValue2 returns the union data inside the AnyValue as a AnyValue2
func (t AnyValue) AsAnyValue2() (AnyValue2, error) {
	var body AnyValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnyValue2 overwrites any union data inside the AnyValue as the provided AnyValue2
func (t *AnyValue) FromAnyValue2(v AnyValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnyValue2 performs a merge with any union data inside the AnyValue, using the provided AnyValue2
func (t *AnyValue) MergeAnyValue2(v AnyValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnyValue3 returns the union data inside the AnyValue as a AnyValue3
func (t AnyValue) AsAnyValue3() (AnyValue3, error) {
	var body AnyValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnyValue3 overwrites any union data inside the AnyValue as the provided AnyValue3
func (t *AnyValue) FromAnyValue3(v AnyValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnyValue3 performs a merge with any union data inside the AnyValue, using the provided AnyValue3
func (t *AnyValue) MergeAnyValue3(v AnyValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnyValue4 returns the union data inside the AnyValue as a AnyValue4
func (t AnyValue) AsAnyValue4() (AnyValue4, error) {
	var body AnyValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnyValue4 overwrites any union data inside the AnyValue as the provided AnyValue4
func (t *AnyValue) FromAnyValue4(v AnyValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnyValue4 performs a merge with any union data inside the AnyValue, using the provided AnyValue4
func (t *AnyValue) MergeAnyValue4(v AnyValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnyValue5 returns the union data inside the AnyValue as a AnyValue5
func (t AnyValue) AsAnyValue5() (AnyValue5, error) {
	var body AnyValue5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnyValue5 overwrites any union data inside the AnyValue as the provided AnyValue5
func (t *AnyValue) FromAnyValue5(v AnyValue5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnyValue5 performs a merge with any union data inside the AnyValue, using the provided AnyValue5
func (t *AnyValue) MergeAnyValue5(v AnyValue5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnyValue6 returns the union data inside the AnyValue as a AnyValue6
func (t AnyValue) AsAnyValue6() (AnyValue6, error) {
	var body AnyValue6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnyValue6 overwrites any union data inside the AnyValue as the provided AnyValue6
func (t *AnyValue) FromAnyValue6(v AnyValue6) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnyValue6 performs a merge with any union data inside the AnyValue, using the provided AnyValue6
func (t *AnyValue) MergeAnyValue6(v AnyValue6) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AnyValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AnyValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search for traces
	// (POST /api/search)
	Search(w http.ResponseWriter, r *http.Request, params SearchParams)
	// Get the root span from a given trace
	// (POST /trace/{traceId}/span/{spanId})
	GetInitialTraceDetail(w http.ResponseWriter, r *http.Request, traceID string, spanID string)
	// Get additional spans for a given span id
	// (POST /trace/{traceId}/span/{spanId}/children)
	GetAdditionalSpans(w http.ResponseWriter, r *http.Request, traceID string, spanID string)
	// Get traces from a given datasource
	// (POST /traces)
	GetTraces(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Search(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInitialTraceDetail operation middleware
func (siw *ServerInterfaceWrapper) GetInitialTraceDetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "traceId" -------------
	var traceID string

	err = runtime.BindStyledParameterWithOptions("simple", "traceId", r.PathValue("traceId"), &traceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "traceId", Err: err})
		return
	}

	// ------------- Path parameter "spanId" -------------
	var spanID string

	err = runtime.BindStyledParameterWithOptions("simple", "spanId", r.PathValue("spanId"), &spanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spanId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInitialTraceDetail(w, r, traceID, spanID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAdditionalSpans operation middleware
func (siw *ServerInterfaceWrapper) GetAdditionalSpans(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "traceId" -------------
	var traceID string

	err = runtime.BindStyledParameterWithOptions("simple", "traceId", r.PathValue("traceId"), &traceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "traceId", Err: err})
		return
	}

	// ------------- Path parameter "spanId" -------------
	var spanID string

	err = runtime.BindStyledParameterWithOptions("simple", "spanId", r.PathValue("spanId"), &spanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spanId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdditionalSpans(w, r, traceID, spanID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTraces operation middleware
func (siw *ServerInterfaceWrapper) GetTraces(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTraces(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/search", wrapper.Search)
	m.HandleFunc("POST "+options.BaseURL+"/trace/{traceId}/span/{spanId}", wrapper.GetInitialTraceDetail)
	m.HandleFunc("POST "+options.BaseURL+"/trace/{traceId}/span/{spanId}/children", wrapper.GetAdditionalSpans)
	m.HandleFunc("POST "+options.BaseURL+"/traces", wrapper.GetTraces)

	return m
}
