//go:build go1.22

// Package plugin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package plugin

import (
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
)

// GetAdditionalSpansRequest defines model for GetAdditionalSpansRequest.
type GetAdditionalSpansRequest struct {
	ChildrenLimit int    `json:"childrenLimit"`
	Database      string `json:"database"`
	Depth         int    `json:"depth"`
	Level         int    `json:"level"`
	Skip          int    `json:"skip"`
	Take          int    `json:"take"`
	TimeField     string `json:"timeField"`
	URL           string `json:"url"`
}

// GetInitialTraceDetailRequest defines model for GetInitialTraceDetailRequest.
type GetInitialTraceDetailRequest struct {
	ChildrenLimit *int   `json:"childrenLimit,omitempty"`
	Database      string `json:"database"`
	Depth         *int   `json:"depth,omitempty"`
	TimeField     string `json:"timeField"`
	URL           string `json:"url"`
}

// GetTracesRequest defines model for GetTracesRequest.
type GetTracesRequest struct {
	Database  string `json:"database"`
	TimeField string `json:"timeField"`
	URL       string `json:"url"`
}

// SpanNode defines model for SpanNode.
type SpanNode struct {
	CurrentChildrenCount int       `json:"currentChildrenCount"`
	EndTime              time.Time `json:"endTime"`
	Level                int       `json:"level"`
	Name                 string    `json:"name"`
	ParentSpanID         string    `json:"parentSpanId"`
	SpanID               string    `json:"spanId"`
	StartTime            time.Time `json:"startTime"`
	TotalChildrenCount   int       `json:"totalChildrenCount"`
	TraceID              string    `json:"traceId"`
}

// Trace defines model for Trace.
type Trace struct {
	Name      string    `json:"name"`
	SpanID    string    `json:"spanId"`
	Timestamp time.Time `json:"timestamp"`
	TraceID   string    `json:"traceId"`
}

// Traces defines model for Traces.
type Traces struct {
	Traces []Trace `json:"traces"`
}

// GetInitialTraceDetailJSONRequestBody defines body for GetInitialTraceDetail for application/json ContentType.
type GetInitialTraceDetailJSONRequestBody = GetInitialTraceDetailRequest

// GetAdditionalSpansJSONRequestBody defines body for GetAdditionalSpans for application/json ContentType.
type GetAdditionalSpansJSONRequestBody = GetAdditionalSpansRequest

// GetTracesJSONRequestBody defines body for GetTraces for application/json ContentType.
type GetTracesJSONRequestBody = GetTracesRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the root span from a given trace
	// (POST /trace/{traceId}/span/{spanId})
	GetInitialTraceDetail(w http.ResponseWriter, r *http.Request, traceID string, spanID string)
	// Get additional spans for a given span id
	// (POST /trace/{traceId}/span/{spanId}/children)
	GetAdditionalSpans(w http.ResponseWriter, r *http.Request, traceID string, spanID string)
	// Get traces from a given datasource
	// (POST /traces)
	GetTraces(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetInitialTraceDetail operation middleware
func (siw *ServerInterfaceWrapper) GetInitialTraceDetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "traceId" -------------
	var traceID string

	err = runtime.BindStyledParameterWithOptions("simple", "traceId", r.PathValue("traceId"), &traceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "traceId", Err: err})
		return
	}

	// ------------- Path parameter "spanId" -------------
	var spanID string

	err = runtime.BindStyledParameterWithOptions("simple", "spanId", r.PathValue("spanId"), &spanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spanId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInitialTraceDetail(w, r, traceID, spanID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAdditionalSpans operation middleware
func (siw *ServerInterfaceWrapper) GetAdditionalSpans(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "traceId" -------------
	var traceID string

	err = runtime.BindStyledParameterWithOptions("simple", "traceId", r.PathValue("traceId"), &traceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "traceId", Err: err})
		return
	}

	// ------------- Path parameter "spanId" -------------
	var spanID string

	err = runtime.BindStyledParameterWithOptions("simple", "spanId", r.PathValue("spanId"), &spanID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spanId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdditionalSpans(w, r, traceID, spanID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTraces operation middleware
func (siw *ServerInterfaceWrapper) GetTraces(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTraces(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/trace/{traceId}/span/{spanId}", wrapper.GetInitialTraceDetail)
	m.HandleFunc("POST "+options.BaseURL+"/trace/{traceId}/span/{spanId}/children", wrapper.GetAdditionalSpans)
	m.HandleFunc("POST "+options.BaseURL+"/traces", wrapper.GetTraces)

	return m
}
