/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Search for traces */
    post: operations['search'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/traces/{traceId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get a trace details by id */
    post: operations['queryTrace'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Information about the datasource to use for the search.
     *     This has the OpenSearch specific fields to connect to the datasource.
     *     It will later have the exactly Tempo API information.
     *      */
    DataSourceInfo: {
      url: string;
      database: string;
      timeField?: string;
      type: string;
    };
    AnyValue: {
      stringValue?: string | null;
      boolValue?: boolean;
      /** Format: int64 */
      intValue?: number;
      /** Format: double */
      doubleValue?: number;
      arrayValue?: components['schemas']['ArrayValue'];
      kvlistValue?: components['schemas']['KeyValueList'];
      bytesValue?: number[] | null;
      valueCase?: components['schemas']['ValueOneofCase'];
    };
    ArrayValue: {
      readonly values?: components['schemas']['AnyValue'][] | null;
    };
    EntityRef: {
      schemaUrl?: string | null;
      type?: string | null;
      readonly idKeys?: string[] | null;
      readonly descriptionKeys?: string[] | null;
    };
    Event: {
      /** Format: int64 */
      timeUnixNano?: number;
      name?: string | null;
      readonly attributes?: components['schemas']['KeyValue'][] | null;
      /** Format: int32 */
      droppedAttributesCount?: number;
    };
    InstrumentationScope: {
      name?: string | null;
      version?: string | null;
      readonly attributes?: components['schemas']['KeyValue'][] | null;
      /** Format: int32 */
      droppedAttributesCount?: number;
    };
    KeyValue: {
      key?: string | null;
      value?: components['schemas']['AnyValue'];
    };
    KeyValueList: {
      readonly values?: components['schemas']['KeyValue'][] | null;
    };
    Link: {
      traceId?: string;
      spanId?: string;
      traceState?: string | null;
      readonly attributes?: components['schemas']['KeyValue'][] | null;
      /** Format: int32 */
      droppedAttributesCount?: number;
      /** Format: int32 */
      flags?: number;
    };
    Resource: {
      readonly attributes?: components['schemas']['KeyValue'][] | null;
      /** Format: int32 */
      droppedAttributesCount?: number;
      readonly entityRefs?: components['schemas']['EntityRef'][] | null;
    };
    ResourceSpans: {
      resource?: components['schemas']['Resource'];
      readonly scopeSpans?: components['schemas']['ScopeSpans'][] | null;
      schemaUrl?: string | null;
    };
    ScopeSpans: {
      scope?: components['schemas']['InstrumentationScope'];
      readonly spans?: components['schemas']['Span'][] | null;
      schemaUrl?: string | null;
    };
    Span: {
      traceId?: string;
      spanID?: string;
      traceState?: string | null;
      /** Format: int32 */
      flags?: number;
      name?: string | null;
      kind?: components['schemas']['SpanKind'];
      /** Format: int64 */
      startTimeUnixNano?: string;
      /** Format: int64 */
      durationNanos?: string;
      readonly attributes?: components['schemas']['KeyValue'][] | null;
      /** Format: int32 */
      droppedAttributesCount?: number;
      readonly events?: components['schemas']['Event'][] | null;
      /** Format: int32 */
      droppedEventsCount?: number;
      readonly links?: components['schemas']['Link'][] | null;
      /** Format: int32 */
      droppedLinksCount?: number;
      status?: components['schemas']['Status'];
    };
    /** @enum {string} */
    SpanKind: 'unspecified' | 'internal' | 'server' | 'client' | 'producer' | 'consumer';
    SpanSet: {
      spans?: components['schemas']['Span'][] | null;
      /** Format: int32 */
      matched?: number;
    };
    Status: {
      message?: string | null;
      code?: components['schemas']['StatusCode'];
    };
    /** @enum {string} */
    StatusCode: 'unset' | 'ok' | 'error';
    /** @enum {string} */
    TagScope: 'all' | 'resource' | 'span' | 'intrinsic';
    TagValue: {
      type?: string | null;
      value?: string | null;
    };
    TempoMetrics: {
      /** Format: int32 */
      inspectedTraces?: number | null;
      /** Format: int32 */
      inspectedBytes?: number | null;
      /** Format: int32 */
      totalBlocks?: number | null;
    };
    TempoScope: {
      name?: string | null;
      tags?: string[] | null;
    };
    TempoTrace: {
      traceID?: string | null;
      rootServiceName?: string | null;
      rootTraceName?: string | null;
      /** Format: int64 */
      startTimeUnixNano?: string;
      /** Format: int64 */
      durationMs?: string;
      readonly spanSets?: components['schemas']['SpanSet'][] | null;
    };
    TempoV1Response: {
      metrics?: components['schemas']['TempoMetrics'];
      traces?: components['schemas']['TempoTrace'][] | null;
      tagNames?: string[] | null;
      tagValues?: string[] | null;
    };
    TempoV2Response: {
      metrics?: components['schemas']['TempoMetrics'];
      traces?: components['schemas']['TempoTrace'][] | null;
      scopes?: components['schemas']['TempoScope'][] | null;
      tagValues?: components['schemas']['TagValue'][] | null;
    };
    TraceDetail: {
      readonly resourceSpans?: components['schemas']['ResourceSpans'][];
    };
    TraceDetailResponse: {
      trace?: components['schemas']['TraceDetail'];
    };
    /** @enum {string} */
    ValueOneofCase:
      | 'none'
      | 'stringValue'
      | 'boolValue'
      | 'intValue'
      | 'doubleValue'
      | 'arrayValue'
      | 'kvlistValue'
      | 'bytesValue';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  search: {
    parameters: {
      query: {
        q: string;
        start: number;
        end: number;
        spss?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['DataSourceInfo'];
      };
    };
    responses: {
      /** @description A list of traces */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TempoV1Response'];
        };
      };
    };
  };
  queryTrace: {
    parameters: {
      query?: {
        start?: number;
        end?: number;
        /** @description The depth of the query.
         *     If not provided, the entire trace will be returned.
         *     Should be a positive integer.
         *      */
        depth?: number;
        /** @description The parent span id to start the query from.
         *     If not provided, the root span will be used.
         *     Requires depth to be present.
         *      */
        spanId?: string;
      };
      header?: never;
      path: {
        traceId: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['DataSourceInfo'];
      };
    };
    responses: {
      /** @description A list of spans */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TraceDetailResponse'];
        };
      };
    };
  };
}
export enum ApiPaths {
  search = '/api/search',
  queryTrace = '/api/v2/traces/{traceId}',
}
