/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/traces': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get traces from a given datasource */
    post: operations['getTraces'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/trace/{traceId}/span/{spanId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get the root span from a given trace */
    post: operations['getInitialTraceDetail'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/trace/{traceId}/span/{spanId}/children': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get additional spans for a given span id */
    post: operations['getAdditionalSpans'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/trace/{traceId}/span/{spanId}/attributes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get the attributes for a given span id */
    post: operations['getSpanAttributes'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    DatasourceInfo: {
      url: string;
      database: string;
      timeField: string;
    };
    Traces: {
      traces: components['schemas']['Trace'][];
    };
    Trace: {
      traceId: string;
      spanId: string;
      /** Format: date-time */
      timestamp: string;
      name: string;
    };
    GetInitialTraceDetailRequest: {
      url: string;
      database: string;
      timeField: string;
      depth?: number;
      childrenLimit?: number;
    };
    SpanNode: {
      traceId: string;
      spanId: string;
      name: string;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      parentSpanId: string;
      level: number;
      currentChildrenCount: number;
      totalChildrenCount: number;
      attributes: Record<string, never>;
    };
    GetAdditionalSpansRequest: {
      url: string;
      database: string;
      timeField: string;
      depth: number;
      childrenLimit: number;
      level: number;
      skip: number;
      take: number;
    };
    SpanAttributes: Record<string, never>;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getTraces: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['DatasourceInfo'];
      };
    };
    responses: {
      /** @description A list of traces */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Traces'];
        };
      };
    };
  };
  getInitialTraceDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        traceId: string;
        spanId: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['GetInitialTraceDetailRequest'];
      };
    };
    responses: {
      /** @description A list of spans */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SpanNode'][];
        };
      };
    };
  };
  getAdditionalSpans: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        traceId: string;
        spanId: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['GetAdditionalSpansRequest'];
      };
    };
    responses: {
      /** @description A list of spans */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SpanNode'][];
        };
      };
    };
  };
  getSpanAttributes: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        traceId: string;
        spanId: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['DatasourceInfo'];
      };
    };
    responses: {
      /** @description Span attributes */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SpanAttributes'];
        };
      };
    };
  };
}
export enum ApiPaths {
  getTraces = '/traces',
  getInitialTraceDetail = '/trace/{traceId}/span/{spanId}',
  getAdditionalSpans = '/trace/{traceId}/span/{spanId}/children',
  getSpanAttributes = '/trace/{traceId}/span/{spanId}/attributes',
}
